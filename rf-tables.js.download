

(function ($) {
  var publicTokenGUID = null;
  var currentFolderGUID = null;
  $(document).ready(function () {
    var location = window.location.href;
    if (location.indexOf("widgettest") >= 0 || location.indexOf("tax.newmexico.gov") >= 0) publicTokenGUID = "0f69200a-5699-48e6-a041-ce3d1324140c";else if (location.indexOf("spo.state.nm.us") >= 0) publicTokenGUID = "06f35930-f697-4f4d-a6b1-0f374955a8a8";else if (location.indexOf("doit") >= 0) publicTokenGUID = "a4497a63-cfaf-4f07-84bf-619690cf09ae";
    setHandlers();

    if ($(".rf-table[data-public=0]").length) {
      var rfToken = localStorage.getItem("rfToken");

      if (rfToken) {
        rfToken = JSON.parse(rfToken);

        if (new Date().getTime() < rfToken.expiration) {
          setWidgets();
        } else {
          showAuthenticateModal();
        }
      } else {
        showAuthenticateModal();
      }
    } else {
      setWidgets();
    }
  });

  function showAuthenticateModal() {
    var html = "<div class='rf-modal'>";
    html += "<div class='login-form'>";
    html += "<div class='input-container'>";
    html += "<label>Email:</label>";
    html += "<input type='text' id='rf-email'>";
    html += "</div>";
    html += "<div class='input-container'>";
    html += "<label>Password:</label>";
    html += "<input type='password' id='rf-password'>";
    html += "</div>";
    html += "<div class='input-container'>";
    html += "<button id='rf-login'>Log in</button>";
    html += "</div>";
    html += "<div class='input-container'>";
    html += "<a href='javascript:void(0)' class='rf-swap-forms'>Forgot Password?</a>";
    html += "</div>";
    html += "</div>";
    html += "<div class='login-form' style='display:none'>";
    html += "<div class='input-container'>";
    html += "<label>Email:</label>";
    html += "<input type='text' id='rf-forgot-email'>";
    html += "</div>";
    html += "<div class='input-container'>";
    html += "<button id='rf-forgot-password'>Reset Password</button>";
    html += "</div>";
    html += "<div class='input-container'>";
    html += "<a href='javascript:void(0)' class='rf-swap-forms'>Login</a>";
    html += "</div>";
    html += "</div>";
    html += "<div class='input-container' id='rf-login-message'></div>";
    html += "</div>";
    $("body").append(html);
    $(document).on('keypress', function (e) {
      if (e.which == 13 && $("#rf-password").is(":focus")) {
        authenticate();
      }
    });
    $("#rf-login").click(authenticate);
    $("#rf-forgot-password").click(forgotPassword);
    $(".rf-swap-forms").click(function () {
      $(".login-form").toggle();
    });
  }

  function authenticate() {
    RF.widgetLogin({
      email: $("#rf-email").val(),
      password: $("#rf-password").val(),
      accountGUID: $(".rf-table[data-account-guid]").data("account-guid")
    }, function (err, data) {
      if (err || !data || !data.permanentAuthTokenGUID) {
        $("#rf-login-message").text("Invalid email or password.");
      } else {
        var rfToken = {
          authTokenGUID: data.permanentAuthTokenGUID,
          expiration: new Date().getTime() + 24 * 60 * 60 * 1000
        };
        localStorage.setItem("rfToken", JSON.stringify(rfToken));
        $(".rf-modal").remove();
        setWidgets();
      }
    });
  }

  function forgotPassword() {
    if (!$("#rf-forgot-email").val()) {
      return $("#rf-login-message").text("Please enter your email.");
    }

    RF.widgetForgotPassword({
      email: $("#rf-forgot-email").val(),
      accountGUID: $(".rf-table[data-account-guid]").data("account-guid")
    }, function (err, data) {
      if (err) {
        $("#rf-login-message").text(err);
      } else {
        $("#rf-login-message").text("A link to reset your password has been sent to your email");
      }
    });
  }

  function setWidgets() {
    var widgets = getWidgets();
    widgets.forEach(function (widget) {
      setWidget(widget);
    });
  }

  function setWidget(widget) {
    widget.authTokenGUID = getAuthToken();
    RF.getWidgetFiles(widget, function (err, data) {
      if (err) {
        console.log("There was an error getting files.");
      } else {
        var sortColumn;
        var sortDir;
        var columns = data.columns;
        currentColumns = columns;
        var files = data.files;
        var folders = data.folders;
        var filesFolders = null;

        for (var i in columns) {
          if (columns[i].sort) {
            sortColumn = columns[i].columnId;

            if (columns[i].sort == true) {
              sortDir = "asc";
            } else {
              sortDir = columns[i].sort;
            }

            break;
          }
        }

        var metadata = data.rootFolderInfo.metadata;
        var sortOrder = null;
        var sortOrderPreference = "none";

        if (metadata != null) {
          metadata = JSON.parse(metadata);

          if (metadata.sortOrder != null && metadata.sortOrder.length > 0) {
            sortOrder = metadata.sortOrder;
            sortOrderPreference = metadata.sortOrderPreference;
          }
        }

        if (sortOrder != null) {
          if (sortOrderPreference == "mixed") filesFolders = sortBySortOrder(files, folders, sortOrder);else {
            folders = sortBySortOrder(null, folders, sortOrder);
            files = sortBySortOrder(files, null, sortOrder);
          }
        } else {
          if (columns.length) {
            sortColumn = sortColumn || "1";
          }

          folders.sort(sortFunction(sortColumn));
          files.sort(sortFunction(sortColumn));

          if (sortDir == "desc") {
            files.reverse();
            folders.reverse();
          }
        }

        for (var i = 0; i < columns.length; i++) {
          if (columns[i].visible == false) {
            columns.splice(i, 1);
            i--;
          }
        }

        html = "<div class='rf-search-container'>";
        html += "<label>Search files: <input type='text' id='searchBox' class='rf-search-box'></label>";

        if (publicTokenGUID != null) {
          html += "<a href=javascript:void(0)' ";
          html += "class='searchFolder' id='searchButton'>Search</a>";
        }

        html += "</div>";

        if (data.rootFolderInfo.allowNavigation == 1) {
          html += "<div class='back'><a style='float:left' href='javascript:void(0)'>&larr; Back</a>";

          if (!widget.widgetId) {
            html += "<a style='float:right' href='javascript:void(0)' class='logout'>";
            html += "Logout</a>";
          }

          html += "<div style='clear:both'></div></div>";
          html += "<div class='breadcrumbs'><a href='javascript:void(0)' data-folder-id='";
          html += data.rootFolderInfo.folderId + "'>" + data.rootFolderInfo.name + "</a></div>";
        }

        html += createTable(columns, files, folders, filesFolders, sortOrderPreference);
        $(".rf-table[data-folder-id=" + widget.rootFolderId + "]").html(html);

        if (data.rootFolderInfo.allowNavigation == 1) {
          html = "<ul style='list-style: none'>";
          html += "<li><span class='open'></span><a data-folder-id='" + data.rootFolderInfo.folderId;
          html += "' href='javascript:void(0)'>" + data.rootFolderInfo.name + "</a>" + createTreeview(folders) + "</li>";
          html += "</ul>";
          $(".rf-treeview[data-folder-id=" + widget.rootFolderId + "]").html(html);
        }

        $.event.trigger({
          type: "widgetUpdate",
          message: widget.rootFolderId
        });
      }
    });
  }

  function sortBySortOrder(files, folders, widgetSortOrder) {
    var sortedItems = [];
    var filesFolders;
    if (files != null && folders != null) filesFolders = files.concat(folders);else if (files != null) filesFolders = files;else filesFolders = folders;
    if (widgetSortOrder == null || widgetSortOrder.length == 0 || widgetSortOrder[0].GUID == null) sortedItems = filesFolders;else {
      for (var i = 0; i < widgetSortOrder.length; i++) {
        var sortItem = widgetSortOrder[i];

        for (var j = 0; j < filesFolders.length; j++) {
          var child = filesFolders[j];

          if (child.GUID == sortItem.GUID || child.folderId == sortItem.GUID || child.fileId == sortItem.GUID) {
            sortedItems.push(child);
            child.added = true;
            break;
          }
        }
      }

      for (var i = 0; i < filesFolders.length; i++) {
        var child = filesFolders[i];
        if (child.added == null) sortedItems.push(child);
      }
    }
    return sortedItems;
  }

  function sortBySortOrderPrev(items, widgetSortOrder) {
    var sortedItems = [];
    if (widgetSortOrder == null || widgetSortOrder.length == 0 || widgetSortOrder[0].GUID == null) sortedItems = items;else {
      for (var i = 0; i < widgetSortOrder.length; i++) {
        var sortItem = widgetSortOrder[i];

        for (var j = 0; j < items.length; j++) {
          var child = items[j];

          if (child.GUID == sortItem.GUID || child.folderId == sortItem.GUID || child.fileId == sortItem.GUID) {
            sortedItems.push(child);
            child.added = true;
            break;
          }
        }
      }

      for (var i = 0; i < items.length; i++) {
        var child = items[i];
        if (child.added == null) sortedItems.push(child);
      }
    }
    return sortedItems;
  }

  function sortFunction(sortColumn) {
    return function (a, b) {
      var columnA = a.metadata[sortColumn] || "";
      var columnB = b.metadata[sortColumn] || "";
      columnA = columnA.toString();
      columnB = columnB.toString();
      var aA = columnA.replace(/ /g, '').match(/[0-9]+|[^0-9]+/gi) || [];
      var bA = columnB.replace(/ /g, '').match(/[0-9]+|[^0-9]+/gi) || [];

      for (var i = 0; i < aA.length; i++) {
        if (!isNaN(aA[i]) || !isNaN(bA[i])) {
          // Numbers
          var aN = parseInt(aA[i]);
          var bN = parseInt(bA[i]);

          if (aN == bN) {} else {
            if (isNaN(aN)) // In IEEE 754 arithmethic, the floating-point model used by JavaScript, NaN (or not-a-number) is, by definition, not less than, equal to, or greater than any other number.
              return -1;else if (isNaN(bN)) return 1;else return aN > bN ? 1 : -1;
          }
        } else {
          if (aA[i] == bA[i]) {} else {
            return aA[i] > bA[i] ? 1 : -1;
          }
        }
      }

      return aA.length > bA.length ? 1 : -1;
    };
  }

  function getWidget(widgetId) {
    var widget = null;
    var widgets = getWidgets();

    for (var i = 0; i < widgets.length; i++) {
      var tmpWidget = widgets[i];

      if (tmpWidget.widgetId == widgetId) {
        widget = tmpWidget;
        break;
      }
    }

    return widget;
  }

  function getWidgets() {
    var widgets = [];
    $(".rf-table").each(function (i, e) {
      widgets.push({
        widgetId: $(e).data("widget-id"),
        folderId: $(e).data("folder-id"),
        rootFolderId: $(e).data("folder-id"),
        accountGUID: $(e).data("account-guid")
      });
    });

    if (widgets.length == 0) {
      $(".rf-treeview").each(function (i, e) {
        widgets.push({
          widgetId: $(e).data("widget-id"),
          folderId: $(e).data("folder-id"),
          rootFolderId: $(e).data("folder-id"),
          accountGUID: $(e).data("account-guid")
        });
      });
    }

    return widgets;
  }

  function createTreeview(folders) {
    var html = "<ul style='list-style: none'>";

    for (var i = 0; i < folders.length; i++) {
      html += "<li><span></span><a data-folder-id='" + folders[i].folderId;
      html += "' href='javascript:void(0)'>" + folders[i].metadata["1"] + "</a></li>";
    }

    html += "</ul>";
    return html;
  }

  function createTable(columns, files, folders, filesFolders, sortOrderPreference) {
    var html = "<table><thead><tr>";
    html += getHeaders(columns);
    html += "</tr></thead><tbody>";

    if (sortOrderPreference == "files") {
      html += getFilesHtml(files, columns);
      html += getFoldersHtml(folders, columns);
    } else if (sortOrderPreference == "mixed") {
      html += getFilesFoldersMixedHtml(filesFolders, columns); //html += getFoldersHtml(folders, columns);
      //html += getFilesHtml(files, columns);
    } else {
      html += getFoldersHtml(folders, columns);
      html += getFilesHtml(files, columns);
    } //html += getFoldersHtml(folders, columns);
    //html += getFilesHtml(files, columns);


    html += "</tbody></table>";
    return html;
  }

  function getFilesFoldersMixedHtml(filesFolders, columns) {
    var html = "";

    for (var i = 0; i < filesFolders.length; i++) {
      var item = filesFolders[i];

      if (item.type == null || item.type == "folder") {
        var folder = item;

        if (folder.metadata["2"]) {
          folder.metadata["2"] = new Date(folder.metadata["2"]).toLocaleString();
        }

        html += "<tr>";

        for (var j in columns) {
          if (columns[j].columnId == 4) {
            var GUID = folder.folderId;
            var isShortcut = null;
            if (folder.isShortcut != null) isShortcut = folder.isShortcut.data[0]; // Bit data type

            if (isShortcut && folder.linkGUID != null) GUID = folder.linkGUID; //html += "<td><a href=\"javascript:void(0)\" class=\"rf-folder\" data-folder-id=\"" + GUID + "\">" + folder.metadata["4"] + "</a></td>"

            html += "<td><a href='javascript:void(0)' class='rf-folder' data-folder-id='" + GUID + "' data-widget-id='" + folder.widgetId + "'>" + folder.metadata["4"] + "</a></td>";
          } else {
            html += "<td>" + (folder.metadata[columns[j].columnId] || "") + "</td>";
          }
        }

        html += "<td></td>";
        html += "</tr>";
      } else {
        var file = item;
        var fileName = file.name;

        if (file.metadata["2"]) {
          file.metadata["2"] = new Date(file.metadata["2"]).toLocaleString();
        }

        var GUID = file.fileId;
        var isShortcut = null;
        if (file.isShortcut != null) isShortcut = file.isShortcut.data[0]; // Bit data type

        if (isShortcut && file.linkGUID != null) GUID = file.linkGUID;
        html += "<tr>";

        for (var j in columns) {
          html += "<td>" + (file.metadata[columns[j].columnId] || "") + "</td>";
        } //html += "<td><a href=\"javascript:void(0)\" class=\"rf-link\" data-file-id=\"" + GUID + "\">Open File</a></td>"


        html += "<td><a href=\"javascript:void(0)\" class=\"rf-link\" data-file-name=\"" + fileName + "\" data-file-id=\"" + GUID + "\">Open File</a></td>";
        html += "</tr>";
      }
    }

    return html;
  }

  function getFoldersHtml(folders, columns) {
    var html = "";

    for (var i = 0; i < folders.length; i++) {
      var folder = folders[i];

      if (folder.metadata["2"]) {
        folder.metadata["2"] = new Date(folder.metadata["2"]).toLocaleString();
      }

      html += "<tr>";

      for (var j in columns) {
        if (columns[j].columnId == 4 || columns[j].name == "Title" && columns[j].columnId == 1) {
          var GUID = folder.folderId;
          var isShortcut = null;
          if (folder.isShortcut != null) isShortcut = folder.isShortcut.data[0]; // Bit data type

          if (isShortcut && folder.linkGUID != null) GUID = folder.linkGUID; //html += "<td><a href=\"javascript:void(0)\" class=\"rf-folder\" data-folder-id=\"" + GUID + "\">" + folder.metadata["4"] + "</a></td>"

          html += "<td><a href='javascript:void(0)' class='rf-folder' data-folder-id='" + GUID + "' data-widget-id='" + folder.widgetId + "'>" + folder.metadata["4"] + "</a></td>";
        } else {
          html += "<td>" + (folder.metadata[columns[j].columnId] || "") + "</td>";
        }
      }

      html += "<td></td>";
      html += "</tr>";
    }

    return html;
  }

  function getFilesHtml(files, columns) {
    var html = "";

    for (var i = 0; i < files.length; i++) {
      var file = files[i];

      if (file.metadata["2"]) {
        file.metadata["2"] = new Date(file.metadata["2"]).toLocaleString();
      }

      var GUID = file.fileId;
      var isShortcut = null;
      if (file.isShortcut != null) isShortcut = file.isShortcut.data[0]; // Bit data type

      if (isShortcut && file.linkGUID != null) GUID = file.linkGUID;
      var fileName = file.name;
      html += "<tr>";

      for (var j in columns) {
        html += "<td>" + (file.metadata[columns[j].columnId] || "") + "</td>";
      }

      html += "<td><a href=\"javascript:void(0)\" class=\"rf-link\" data-file-name=\"" + fileName + "\" data-file-id=\"" + GUID + "\">Open File</a></td>";
      html += "</tr>";
    }

    return html;
  }

  function pushBreadcrumb(folder) {
    var html = "<span>/</span>";
    html += "<a href='javascript:void(0)' data-folder-id='";
    html += folder.folderId + "'>" + folder.name + "</a>";
    $(this).closest(".rf-table").find(".breadcrumbs").append(html);
  }

  function getHeaders(columns) {
    var html = "";

    for (var i in columns) {
      html += "<th>" + columns[i].name + "</th>";
    }

    html += "<th>Open File</th>";
    return html;
  }

  function setHandlers() {
    $(".rf-table").on('click', ".rf-link", openFile);
    $(".rf-treeview").on('click', 'a', treeviewNavigate);
    $(".rf-treeview").on('click', 'span', treeviewExpand);
    $(".rf-table").on('click', ".rf-folder", tableNavigate);
    $(".rf-table").on('click', ".breadcrumbs a", breadcrumbNavigate);
    if (publicTokenGUID == null) $(".rf-table").on('keyup', '.rf-search-box', filter);
    $(".rf-table").on('click', '.back', back);
    $(".rf-table").on('click', '.logout', logout);
    $(".rf-table").on('click', '.searchFolder', searchFolder);
  }

  var currentColumns = null;
  var realFileServiceURL = "https://rf-sb-prod.rtsclients.com/";

  function searchFolder(evt) {
    var data = $(this).closest(".rf-tables").data;
    var columns = $(this).closest('.rf-table').data("columns");
    var searchBox = document.getElementById("searchBox");
    var searchText = searchBox.value;
    var tmpSearchText = searchText.replaceAll("-", " "); // elasticsearch uses "-" and whitespace as a word delimiter by default so searching with "-" is a problem

    tmpSearchText = tmpSearchText.replaceAll("'", "");

    if (searchText != null && searchText != "") {
      var folderGUID = currentFolderGUID;
      if (folderGUID == null) folderGUID = $(this).closest('.rf-table').data("folder-id");
      var accountGUID = $(this).closest('.rf-table').data("account-guid");
      var widgetId = $(this).closest('.rf-table').data("widget-id");
      $.ajax({
        url: realFileServiceURL + "SearchFiles",
        type: "GET",
        dataType: "jsonp",
        data: {
          tokenGUID: publicTokenGUID,
          folderGUID: folderGUID,
          searchText: tmpSearchText
        },
        success: function success(data) {
          if (data == null || data.length == 0) alert("No search results found.");else displaySearchResults(folderGUID, widgetId, data, searchText);
        },
        error: function error(_error) {
          alert("No search results found.");
        }
      });
    }
  }

  function displaySearchResults(folderGUID, widgetId, filesFolders, searchText) {
    var html = "";
    var columns = currentColumns;
    var files = [];
    var folders = [];

    for (var i = 0; i < filesFolders.length; i++) {
      var item = filesFolders[i];

      if (item.title != null) {
        if (item.type == "folder") folders.push(item);else files.push(item);
      }
    }

    files = files.sort(function (a, b) {
      if (a.title < b.title) return -1;else if (a.title > b.title) return 1;
      return 0;
    });
    folders = folders.sort(function (a, b) {
      if (a.title < b.title) return -1;else if (a.title > b.title) return 1;
      return 0;
    });
    filesFolders = files.concat(folders);
    searchText = searchText.toLowerCase();

    for (var i = 0; i < filesFolders.length; i++) {
      var item = filesFolders[i];
      var title = item.title.toLowerCase();
      var name = item.name.toLowerCase();
      var description = item.description.toLowerCase();

      if (!item.isShortcut && !item.parentGUIDs.includes("RECYCLE") && (name.includes(searchText) || title.includes(searchText) || description.includes(searchText))) {
        if (item.type == null || item.type == "folder") {
          var folder = item;
          html += "<tr>";
          var GUID = folder.GUID;
          var isShortcut = null;
          if (folder.isShortcut && folder.linkGUID != null) GUID = folder.linkGUID; //html += "<td><a href='javascript:void(0)' class='rf-folder' data-folder-id='" + GUID + "' data-widget-id='" + widgetId + "'>" + folder.title + "</a></td>"

          html += "<td><a href='javascript:void(0)' class='rf-folder' data-folder-id='" + GUID + "'>" + folder.title + "</a></td>";
          html += "<td></td>";
          html += "</tr>";
        } else {
          var file = item;
          var fileName = file.name;
          var GUID = file.GUID;
          var isShortcut = null;
          if (file.isShortcut && file.linkGUID != null) GUID = file.linkGUID;
          html += "<tr>";
          html += "<td>" + file.title + "</td>"; //html += "<td><a href=\"javascript:void(0)\" class=\"rf-link\" data-file-id=\"" + GUID + "\">Open File</a></td>"

          html += "<td><a href=\"javascript:void(0)\" class=\"rf-link\" data-file-name=\"" + fileName + "\" data-file-id=\"" + GUID + "\">Open File</a></td>";
          html += "</tr>";
        }
      }
    }

    var widget = getWidget(widgetId);
    var prevThis = $(".rf-table[data-folder-id=" + widget.rootFolderId + "]");
    var headHtml = "<th>Title</th><th>Open File</th>";
    var closestThead = $(prevThis).closest(".rf-table").find("thead tr");
    closestThead.html(headHtml);
    var closestTbody = $(prevThis).closest(".rf-table").find("tbody");
    closestTbody.html(html); //$(prevThis).closest(".rf-table").find("thead tr").html(getHeaders(columns));
    //$(prevThis).closest(".rf-table").find("tbody").html(html);
    //$(".rf-table[data-folder-id=" + folderGUID + "]").html(html)

    $.event.trigger({
      type: "widgetUpdate",
      message: widget.rootFolderId
    });
  }

  function back() {
    var closest0 = $(this).closest(".rf-table").find(".breadcrumbs").find('a').last();
    var closest1 = closest0.prev();
    var closest2 = closest1.prev();
    var closest = closest0;
    if (closest2.length > 0) closest = closest2;else if (closest1.length > 0) closest = closest1;
    closest.click(); //$(this).closest(".rf-table").find(".breadcrumbs").find('a').last().prev().prev().click()
  }

  function logout() {
    localStorage.removeItem("rfToken");
    window.location.reload();
  }

  function treeviewNavigate() {
    var folderId = $(this).closest(".rf-treeview").data("folder-id");
    var table = $(".rf-table[data-folder-id='" + folderId + "']");
    var prevThis = this;
    RF.getWidgetFiles({
      widgetId: $(this).closest(".rf-treeview").data("widget-id"),
      authTokenGUID: getAuthToken(),
      rootFolderId: folderId,
      folderId: $(this).closest('li').find("a").data("folder-id"),
      accountGUID: $(this).closest(".rf-treeview").data("account-guid")
    }, function (err, data) {
      table.find(".breadcrumbs").children().first().nextAll().remove();
      var treeview = $(prevThis).closest(".rf-treeview");
      var level = $(prevThis);
      var breadcrumbFolders = [];

      while (level.data("folder-id") != folderId) {
        breadcrumbFolders.push({
          name: level.text(),
          folderId: level.data("folder-id")
        });
        level = level.closest("ul").siblings("a");
      }

      var breadcrumbHtml = "<span>/</span>" + breadcrumbFolders.reverse().map(function (folder) {
        return "<a href='javascript:void(0)' data-folder-id='" + folder.folderId + "'>" + folder.name + "</a>";
      }).join("<span>/</span>");
      table.find(".breadcrumbs").append(breadcrumbHtml);
      var html = getFoldersHtml(data.folders, data.columns);
      html += getFilesHtml(data.files, data.columns);
      table.find("tbody").html(html);
      $.event.trigger({
        type: "widgetUpdate",
        message: folderId
      });
    });
  }

  function treeviewExpand() {
    if ($(this).hasClass("open")) {
      $(this).closest("li").find("ul").remove();
      $(this).removeClass('open');
    } else {
      var prevThis = this;
      RF.getWidgetFiles({
        widgetId: $(this).closest(".rf-treeview").data("widget-id"),
        rootFolderId: $(this).closest(".rf-treeview").data("folder-id"),
        folderId: $(this).closest('li').find("a").data("folder-id"),
        accountGUID: $(this).closest(".rf-treeview").data("account-guid")
      }, function (err, data) {
        data.folders.sort(function (a, b) {
          if (a.metadata["1"] < b.metadata["1"]) {
            return -1;
          }

          if (a.metadata["1"] > b.metadata["1"]) {
            return 1;
          }

          return 0;
        });
        var html = createTreeview(data.folders);
        $(prevThis).closest("li").append(html);
        $(prevThis).addClass('open');
        $.event.trigger({
          type: "widgetUpdate",
          message: folderId
        });
      });
    }
  }

  function breadcrumbNavigate() {
    $(this).nextAll().remove();
    loadWidget.bind(this)($(this).data("folder-id"));
  }

  function tableNavigate() {
    var folderId = $(this).data("folder-id");
    var name = $(this).text();
    pushBreadcrumb.bind(this)({
      folderId: folderId,
      name: name
    });
    loadWidget.bind(this)($(this).data("folder-id"));
  }

  function getAuthToken() {
    try {
      var token = JSON.parse(localStorage.getItem("rfToken"));

      if (token.expiration > new Date().getTime()) {
        return token.authTokenGUID;
      }

      return null;
    } catch (e) {
      return null;
    }
  }

  function loadWidget(folderId) {
    var prevThis = this;
    var widgetId = $(this).data("widget-id");
    var rootFolderId = folderId;
    var authTokenGUID = getAuthToken();
    var accountGUID = $(this).closest(".rf-table").data("account-guid");
    var widget = getWidget(widgetId);

    if (widgetId == null) {
      widgetId = $(this).closest(".rf-table").data("widget-id");
      rootFolderId = $(this).closest(".rf-table").data("folder-id");
    }

    currentFolderGUID = folderId;
    RF.getWidgetFiles({
      widgetId: widgetId,
      rootFolderId: rootFolderId,
      folderId: folderId,
      authTokenGUID: authTokenGUID,
      accountGUID: accountGUID
    }, function (err, data) {
      var sortColumn;
      var sortDir;
      var columns = data.columns;
      currentColumns = columns;
      var files = data.files;
      var folders = data.folders;
      var filesFolders = null;

      for (var i = 0; i < files.length; i++) {
        var file = files[i];

        if (file.metadata["2"]) {
          file.metadata["2"] = new Date(file.metadata["2"]).toLocaleString();
        }
      }

      for (var i = 0; i < folders.length; i++) {
        var folder = folders[i];

        if (folder.metadata["2"]) {
          folder.metadata["2"] = new Date(folder.metadata["2"]).toLocaleString();
        }
      }

      for (var i in columns) {
        if (columns[i].sort) {
          sortColumn = columns[i].columnId;

          if (columns[i].sort == true) {
            sortDir = "asc";
          } else {
            sortDir = columns[i].sort;
          }

          break;
        }
      }

      var metadata = data.metadata;
      var sortOrder = null;
      var sortOrderPreference = "none";

      if (metadata != null) {
        metadata = JSON.parse(metadata);

        if (metadata.sortOrder != null && metadata.sortOrder.length > 0) {
          sortOrder = metadata.sortOrder;
          sortOrderPreference = metadata.sortOrderPreference;
        }
      }

      if (sortOrder != null) {
        folders = sortBySortOrder(null, folders, sortOrder);
        files = sortBySortOrder(files, null, sortOrder);
        filesFolders = sortBySortOrder(files, folders, sortOrder);
      } else {
        if (columns.length) {
          sortColumn = sortColumn || "1";
        }

        folders.sort(sortFunction(sortColumn));
        files.sort(sortFunction(sortColumn));

        if (sortDir == "desc") {
          files.reverse();
          folders.reverse();
        }
      }

      for (var i = 0; i < columns.length; i++) {
        if (columns[i].visible == false) {
          columns.splice(i, 1);
          i--;
        }
      }

      var html = ""; //html = getFoldersHtml(folders, data.columns);
      // html += getFilesHtml(files, data.columns);

      if (sortOrderPreference == "files") {
        html = getFilesHtml(files, data.columns);
        html += getFoldersHtml(folders, data.columns);
      } else if (sortOrderPreference == "mixed") {
        html = getFilesFoldersMixedHtml(filesFolders, data.columns); //html = getFoldersHtml(folders, data.columns);
        //html += getFilesHtml(files, data.columns);
      } else {
        html = getFoldersHtml(folders, data.columns);
        html += getFilesHtml(files, data.columns);
      }

      $(prevThis).closest(".rf-table").find("thead tr").html(getHeaders(columns));
      $(prevThis).closest(".rf-table").find("tbody").html(html);
      $.event.trigger({
        type: "widgetUpdate",
        message: rootFolderId
      });
    });
  }

  function openFile() {
    var fileId = $(this).data("file-id");
    var fileName = $(this).data("file-name");
    var widgetId = $(this).closest(".rf-table").data("widget-id");
    var accountGUID = $(this).closest(".rf-table").data("account-guid");
    var authTokenGUID = getAuthToken(); // Get non expiring links for tax & rev initially.
    // If it works out move to RF sdk with option for expiring or non expiring link

    if (accountGUID == "34821a9573ca43e7b06dfad20f5183fd") {
      //var realFileLambdaURL = "https://ln1kirn6v6.execute-api.us-west-2.amazonaws.com/prod/";
      var realFileLambdaURL = "https://klvg4oyd4j.execute-api.us-west-2.amazonaws.com/prod/";
      var url = realFileLambdaURL + "PublicFiles/" + accountGUID + "/" + fileId + "/" + fileName;
      url = encodeURI(url);
      console.log(url);
      window.open(url);
    } else {
      var windowReference = window.open("about:blank", "_blank");
      RF.getWidgetFileLink({
        fileId: fileId,
        widgetId: widgetId,
        authTokenGUID: authTokenGUID,
        accountGUID: accountGUID
      }, function (err, data) {
        if (data) {
          //window.open(data.url);
          windowReference.location = data.url;
        } else {
          console.log("Could not get file.");
        }
      });
    }
  }

  function filter() {
    if (!$(this).val()) {
      $(this).closest(".rf-table").find("tr").show();
    } else {
      var search = $(this).val().toLowerCase();
      $(this).closest(".rf-table").find("tr").each(function (i, e) {
        if ($(e).text().toLowerCase().replace("open file", "").indexOf(search) != -1) {
          $(e).show();
        } else {
          $(e).hide();
        }
      });
    }
  }
})(jQuery);